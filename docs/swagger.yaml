definitions:
  model.Permission:
    properties:
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
    type: object
  model.Role:
    properties:
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      permission:
        $ref: '#/definitions/model.Permission'
      username:
        type: string
    type: object
  request.LoginUser:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  request.Permission:
    properties:
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    required:
    - name
    - roles
    type: object
  request.User:
    properties:
      email:
        type: string
      permission:
        $ref: '#/definitions/request.Permission'
      username:
        type: string
    required:
    - email
    - permission
    - username
    type: object
  response.PaginationResponse:
    properties:
      pageNumber:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  response.ResponseError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  response.RestResponsePagination-model_User:
    properties:
      elements:
        items:
          $ref: '#/definitions/model.User'
        type: array
      pagination:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.restResponseError:
    properties:
      errors:
        items:
          $ref: '#/definitions/response.ResponseError'
        type: array
    type: object
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Size per page
        in: query
        name: size
        type: integer
      - description: Sort by field
        in: query
        name: sortBy
        type: string
      - description: Sort order (asc or desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            $ref: '#/definitions/response.RestResponsePagination-model_User'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.restResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.restResponseError'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Invalid request body or validation errors
          schema:
            $ref: '#/definitions/response.restResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.restResponseError'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - user
  /{id}:
    get:
      consumes:
      - application/json
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/response.restResponseError'
        "404":
          description: Internal Error
          schema:
            $ref: '#/definitions/response.restResponseError'
      security:
      - BearerAuth: []
      summary: Find a user by ID
      tags:
      - user
  /login:
    post:
      consumes:
      - application/json
      description: Login a user and return a JWT token
      parameters:
      - description: Username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.LoginUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Invalid request body or validation errors
          schema:
            $ref: '#/definitions/response.restResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.restResponseError'
      security:
      - BearerAuth: []
      summary: Login user
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
